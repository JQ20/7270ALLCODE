<!DOCTYPE html>
<html>

<head>
  <title>New Sails App</title>

  <!-- Viewport mobile tag for sensible mobile support -->
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

  <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
  <%/* <meta name="robots" content="noindex"> */%>


  <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other disrectories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

  <!--STYLES-->
  <link rel="stylesheet" href="/styles/importer.css">
  <!--STYLES END-->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.0/css/bulma.min.css">
  <style>
    .bd-main {
      padding: 0 1.5rem;
    }

    .navbar-item {
      font-size: 1.3rem;
    }

    .navbar-item {
      font-weight: 700;
    }

    .icons {
      padding-right: .25em;
    }

    .footer {
      margin-top: 10rem;
      padding: 1.5rem 1.5rem 1.5rem;
    }

  </style>
</head>

<body class="layout-default">

  <nav class="navbar bd-navbar has-shadow is-spaced" role="navigation" aria-label="main navigation">
    <div class="container">

      <div class="navbar-brand">
        <a class="" href="https://github.com/JQ20/QponPublicPre" style="padding-top: 0px;padding-left: 12px;padding-right: 12px;">
          <img src="../../../images/redlogo.png" width="112" height="120">
        </a>

        <a role="button" class="navbar-burger" data-target="navMenu" aria-label="menu" aria-expanded="false">
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
          <span aria-hidden="true"></span>
        </a>
      </div>

      <div id="navMenu" class="navbar-menu">
        <div class="navbar-start">

          <a class="navbar-item" href="/">
            <i class="fa fa-home icons"></i>
            Home
          </a>

          <a class="navbar-item" href="../../search?limit=2&offset=0">
            <i class="fa fa-search icons"></i>
            Search
          </a>

          <a class="navbar-item" href="../../create">
            <i class="fa fa-plus icons"></i>
            Create
          </a>

          <a class="navbar-item" href="../../admin">
            <i class="fa fa-users icons"></i>
            Admin
          </a>

        </div>

        <div class="navbar-end">
          <div class="navbar-item">
            <div class="buttons">
              <a class="button is-primary">
                <strong>Sign up</strong>
              </a>
              <a class="button is-light">
                Sign in
              </a>
            </div>
          </div>
        </div>
      </div>

    </div>
  </nav>
  <main class="bd-main">
    <div class="bd-main-container container">
      <div class="bd-duo">


        <%- body %>
      </div>
    </div>



    <footer class="footer">
      <div class="content has-text-centered">
        <p>
          <strong>Qpon</strong> by <b>SHEN QIANG</b>.
        </p>
        <p><a href="https://github.com/JQ20/QponPublicPre"><i class="fas fa-external-link-alt" style="padding-top: 0.2rem;"></i> Project Details&&Project
            Demonstration</p></a>
      </div>
    </footer>
  </main>

  <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

  <!--TEMPLATES-->
  <!--TEMPLATES END-->


  <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


  <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->


  <!--SCRIPTS-->
  <script src="/dependencies/sails.io.js"></script>
  <!--SCRIPTS END-->
  <script defer src="https://use.fontawesome.com/releases/v5.3.1/js/all.js"></script>
  <script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.js"></script>
  <script>
    $(document).ready(function () {

      // Check for click events on the navbar burger icon
      $(".navbar-burger").click(function () {

        // Toggle the "is-active" class on both the "navbar-burger" and the "navbar-menu"
        $(".navbar-burger").toggleClass("is-active");
        $(".navbar-menu").toggleClass("is-active");

      });
    });

  </script>

  <script>
    function deleteQ() {
      //        document.("表单的name值").action
      //        document.("表单的name值").submit
      document.update.action = "qpon/delete/<%=Qpon.id%>";
      document.update.submit();
    }

    function updateQ() {
      
      document.update.action = "qpon/update/<%=Qpon.id%>";
      document.update.submit();
    } 

      function sumbit_sure() {
        var gnl = confirm("这是不可逆操作，确定要这么做么?");
        if (gnl == true) {
          return true;
        } else {
          return false;
        }
      } 


  </script>
</body>

</html>
